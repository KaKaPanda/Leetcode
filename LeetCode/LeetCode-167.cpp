class Solution {
public:
    // 所设计的解决方案必须只使用常量级的额外空间
    // 方法一：二分查找
    // 在数组中找到两个数，使得它们的和等于目标值，可以首先固定第一个数，然后寻找第二个数，
    // 第二个数等于目标值减去第一个数的差。利用数组的有序性质，可以通过二分查找的方法寻找第二个数。
    // 为了避免重复寻找，在寻找第二个数时，只在第一个数的右侧寻找。

    // 方法二： 指针法
    // 初始时两个指针分别指向第一个元素位置和最后一个元素的位置。每次计算两个指针指向的两个元素之和，
    // 并和目标值比较。如果两个元素之和等于目标值，则发现了唯一解。如果两个元素之和小于目标值，
    // 则将左侧指针右移一位。如果两个元素之和大于目标值，则将右侧指针左移一位。
    // 移动指针之后，重复上述操作，直到找到答案。

    vector<int> twoSum(vector<int>& numbers, int target) {
        if (numbers.size() <= 1) return {};

        int p1 = 0, p2 = numbers.size()-1;
        while (p1 < p2) {
            int sum = numbers[p1] + numbers[p2];
            if (sum == target) {
                return {p1+1, p2+1};
            } else if (sum < target) {
                ++p1;
            } else {
                --p2;
            }
        }
        return {};
    }
};